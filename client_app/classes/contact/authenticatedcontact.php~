<?php
	
	class AuthenticatedContact extends dataObject
	{
		
		function __construct ()
		{
			parent::__construct ("Contact");
			
			// Check their session is valid ...
			$selAuthenticated = new StatementSelect (
				"Contact", "*", 
				"Id = <Id> AND SessionID = <SessionId> AND SessionExpire > NOW()"
			);
			
			$selAuthenticated->Execute(Array("Id" => $_COOKIE ['Id'], "SessionId" => $_COOKIE ['SessionId']));
			
			if ($selAuthenticated->Count () <> 1)
			{
				throw new Exception ("Class AuthenticatedContact could not instantiate because Session could not be Authenticated");
			}
			
			$rowContact = $selAuthenticated->Fetch ("Contact");
			
			$i=0;
			foreach ($rowContact as $fldInformation)
			{
				$field [$i] = $fldInformation;
				$this->Push ($field [$i]);
				++$i;
			}
		}
		
		public function isCustomerContact ()
		{
			return $this->Pull ("CustomerContact")->getValue () == 1;
		}
		
		public function getAccounts ()
		{
			// If we're not a customer contact, we don't have multiple accounts - so die
			if (!$this->isCustomerContact ())
			{
				throw new Exception ("You cannot list accounts because you only have 1");
			}
			
			DatabaseAccess::$bolObLib = false;
			
			// Get a list of accounts for this person ...
			$selAccounts = new StatementSelect ("Account", "Id", "AccountGroup = <AccountGroup>");
			$selAccounts->Execute(Array("AccountGroup" => $this->Pull ("AccountGroup")->getValue ()));
			
			$oblarrAccounts = new dataArray ("Accounts", "Account");
			
			while ($AccountId = $selAccounts->Fetch ("Account"))
			{
				$oblarrAccounts->Push (new Account ($AccountId ['Id']));
			}
			
			DatabaseAccess::$bolObLib = true;
			
			return $oblarrAccounts;
		}
		
		public function getAccount ($Id)
		{
			// If the Contact is an Account Group Contact, then we want to validate against the Account Group rather than the Account
			// Otherwise - we want to authenticate against the Account in the Contact Profile
			if ($this->isCustomerContact ())
			{
				echo "Id: " . $Id; exit;
				
				$selAccount = new StatementSelect ("Account", "Id", "Id = <Id> AND AccountGroup = <AccountGroup>");
				$selAccount->Execute
				(
					Array
					(
						"Id" => $Id,
						"AccountGroup" => $this->Pull ("AccountGroup")->getValue ()
					)
				);
				
				if ($selAccount->Count () == 0)
				{
					echo "not foud"; exit;
					return false;
				}
				
				return new Account (
					$Id
				);
			}
			else
			{
				
			}
			
			exit;
		}
	}
	
?>
