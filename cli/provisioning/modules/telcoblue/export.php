<?php

 class ExportTelcoBlue extends ExportBase {
 	const API_AUTHENTICATION_HEADER = 'API_AUTHENTICATION';
 	const WHOLESALE_IDENTIFIER_CONTEXT_FULLSERVICE_LANDLINE = 1;
 	const WHOLESALE_IDENTIFIER_CONTEXT_PRESELECTION_LANDLINE = 2;

 	public $intBaseFileType = RESOURCE_TYPE_FILE_EXPORT_PROVISIONING_TELCOBLUE;
	public $_strDeliveryType;
	public $_intFrequencyType = FREQUENCY_SECOND;
	public $_intFrequency = 1;
	public $_intEarliestDelivery = 0;

	protected $_arrFileContent;
	protected $_arrDefine;
	protected $_arrFilename;
	protected $_arrHeader;
	protected $_arrFooter;
	protected $_ptrFile;

	private $_aData = array();

	// Maps service types to wholesale identifier contexts
 	private static $_aServiceIdentifierContexts = array(
 		SERVICE_TYPE_ADSL => array(),
 		SERVICE_TYPE_MOBILE => array(),
 		SERVICE_TYPE_LAND_LINE => array(
 			PROVISIONING_TYPE_FULL_SERVICE => self::WHOLESALE_IDENTIFIER_CONTEXT_FULLSERVICE_LANDLINE,
	 		PROVISIONING_TYPE_PRESELECTION => self::WHOLESALE_IDENTIFIER_CONTEXT_PRESELECTION_LANDLINE,
	 		PROVISIONING_TYPE_FULL_SERVICE_PLAN_CHANGE => self::WHOLESALE_IDENTIFIER_CONTEXT_FULLSERVICE_LANDLINE,
	 		PROVISIONING_TYPE_PRESELECTION_PLAN_CHANGE => self::WHOLESALE_IDENTIFIER_CONTEXT_PRESELECTION_LANDLINE,
	 		PROVISIONING_TYPE_FULL_SERVICE_REVERSE => self::WHOLESALE_IDENTIFIER_CONTEXT_FULLSERVICE_LANDLINE,
	 		PROVISIONING_TYPE_PRESELECTION_REVERSE => self::WHOLESALE_IDENTIFIER_CONTEXT_PRESELECTION_LANDLINE/*,
	 		PROVISIONING_TYPE_BAR => self::WHOLESALE_IDENTIFIER_CONTEXT_PRESELECTION_LANDLINE,
	 		PROVISIONING_TYPE_UNBAR => self::WHOLESALE_IDENTIFIER_CONTEXT_PRESELECTION_LANDLINE*/
 		),
 		SERVICE_TYPE_INBOUND => array(),
 		SERVICE_TYPE_DIALUP => array()
 	);
	
	function __construct($iCarrierId) {
 		// Parent Constructor
 		parent::__construct($iCarrierId);
 		
 		// Module Description
 		$this->strDescription = "Telco Blue Provisioning Export";
 		
 		 // Module Configuration
		$this->_arrModuleConfig['APIURL']['Type'] = DATA_TYPE_STRING;
		$this->_arrModuleConfig['APIURL']['Description'] = "URL of the API to connect to";

 		$this->_arrModuleConfig['APIPort']['Type'] = DATA_TYPE_INTEGER;
		$this->_arrModuleConfig['APIPort']['Description'] = "Port to connect to on API Server";

 		$this->_arrModuleConfig['APIPassword']['Type'] = DATA_TYPE_STRING;
		$this->_arrModuleConfig['APIPassword']['Description'] = "Password with which to authenticate with the API";
 		
 		$this->_arrModuleConfig['WholesaleAccountId']['Type'] = DATA_TYPE_INTEGER;
		$this->_arrModuleConfig['WholesaleAccountId']['Description'] = "Wholesale Account Id of this system";
 		
		// Define File Format, Delimiter & New Line (all not necessary for this module but the variables need to exist for parent class functionality)
 		$this->_strFileFormat = null;
 		$this->_strDelimiter = null;
 		$this->_strNewLine = null;
 		$this->_arrDefine = array();
 		$this->_iTimestamp = time();
 		$this->_intMinRequests = 0;

 		// These are setup in an empty way to satisfy parent class functionality which
 		// expects this module to generate a file... which it doesn't.
		$this->_arrDefine['Header']	= null;
 		$this->_arrDefine['Footer'] = null;

 		// Accepted provisioning types
 		$this->_arrDefine[PROVISIONING_TYPE_FULL_SERVICE] = array();
 		$this->_arrDefine[PROVISIONING_TYPE_PRESELECTION] = array();
 		$this->_arrDefine[PROVISIONING_TYPE_FULL_SERVICE_PLAN_CHANGE] = array();
 		$this->_arrDefine[PROVISIONING_TYPE_PRESELECTION_PLAN_CHANGE] = array();
 		$this->_arrDefine[PROVISIONING_TYPE_FULL_SERVICE_REVERSE] = array();
 		$this->_arrDefine[PROVISIONING_TYPE_PRESELECTION_REVERSE] = array();
 		//$this->_arrDefine[PROVISIONING_TYPE_BAR] = array();
 		//$this->_arrDefine[PROVISIONING_TYPE_UNBAR] = array();

 		// No file content to be generated by this module
 		$this->_arrFileContent = array();
 	}
 	
	// Output: Exports a ProvisioningRequest Record to a format accepted by the Carrier
 	function Output($aRequest) {
 		try {
	 		// Modifications to the request record
	 		$aRequest['CarrierRef']	= $aRequest['Id'];

 			// Fetch service and rate plan info for the request
	 		$oService = Service::getForId($aRequest['Service']);

	 		// The identifier is the services fnn
	 		$sIdentifier = $oService->FNN;

	 		// The wholesale identifier type is derived, currently hard coded in this class
	 		$iRequestType = $aRequest['Type'];
	 		if (!isset(self::$_aServiceIdentifierContexts[$oService->ServiceType]) || !isset(self::$_aServiceIdentifierContexts[$oService->ServiceType][$iRequestType])) {
	 			throw new Exception("Cannot find service identifier context (Service Type: {$oService->ServiceType}; Provisioning Type: {$iRequestType})");
	 		}

	 		$iServiceIdentifierContext = self::$_aServiceIdentifierContexts[$oService->ServiceType][$iRequestType];

	 		// Create address data if necessary
	 		$oServiceAddress = $oService->getServiceAddress();
	 		$aAddress = null;
			if ($oServiceAddress !== null) {
				// Address is not required
				/*$aAddress = array(
					'address_type' => $oServiceAddress->ServiceAddressType,
					'address_type_number' => $oServiceAddress->ServiceAddressTypeNumber,
					'address_type_suffix' => $oServiceAddress->ServiceAddressTypeSuffix,
					'street_number_start' => $oServiceAddress->ServiceStreetNumberStart,
					'street_number_end'	=> $oServiceAddress->ServiceStreetNumberEnd,
					'street_number_suffix' => $oServiceAddress->ServiceStreetNumberSuffix,
					'street_name' => $oServiceAddress->ServiceStreetName,
					'street_type' => $oServiceAddress->ServiceStreetType,
					'street_type_suffix' => $oServiceAddress->ServiceStreetTypeSuffix,
					'property_name' => $oServiceAddress->ServicePropertyName,
					'locality' => $oServiceAddress->ServiceLocality,
					'state' => $oServiceAddress->ServiceState,
					'postcode' => $oServiceAddress->ServicePostcode
				);*/
			}

	 		// Fetch the rate plan
	 		$oRatePlan = Rate_Plan::getForId($oService->getCurrentServiceRatePlan()->RatePlan);

	 		// Validate the wholesale plan and build the request data based on the provisioning type
	 		$sNow = DataAccess::getDataAccess()->getNow();
	 		$aData = array('client_reference' => $aRequest['Id']);
	 		$bHasFullServicePackage = !empty($oRatePlan->fullservice_wholesale_plan) && ($oRatePlan->fullservice_wholesale_plan !== null);
	 		$bHasPreSelectionPackage = !empty($oRatePlan->preselection_wholesale_plan) && ($oRatePlan->preselection_wholesale_plan !== null);
	 		$sDescription = '';
	 		switch ($iRequestType) {
	 			case PROVISIONING_TYPE_FULL_SERVICE:
			 		if (!$bHasFullServicePackage) {
			 			throw new Exception("The rate plan for the requested service does not have a fullservice_wholesale_plan");
			 		}

			 		$aData = array_merge($aData, array(
						'package' => (int)$oRatePlan->fullservice_wholesale_plan,
						'identifier' => $sIdentifier,
						'identifier_context' => $iServiceIdentifierContext,
						'address' => $aAddress,
						'ca_signed_date' => $aRequest['AuthorisationDate']
					));

			 		$sURL = "/services";
			 		$aExtraHeaders = array();
			 		$sDescription = 'Full Service Add Service';
	 				break;
	 			case PROVISIONING_TYPE_PRESELECTION:
		 			if (!$bHasPreSelectionPackage) {
			 			throw new Exception("The rate plan for the requested service does not have a preselection_wholesale_plan");
			 		}

			 		$aData = array_merge($aData, array(
						'package' => (int)$oRatePlan->preselection_wholesale_plan,
						'identifier' => $sIdentifier,
						'identifier_context' => $iServiceIdentifierContext,
						'address' => $aAddress,
						'ca_signed_date' => $aRequest['AuthorisationDate']
					));

			 		$sURL = "/services";
			 		$aExtraHeaders = array();
			 		$sDescription = 'Pre-Selection Add Service';
	 				break;
	 			case PROVISIONING_TYPE_FULL_SERVICE_PLAN_CHANGE:
	 				if (!$bHasFullServicePackage) {
			 			throw new Exception("The rate plan for the requested service does not have a fullservice_wholesale_plan");
			 		}

			 		$aData = array_merge($aData, array(
						'package' => (int)$oRatePlan->fullservice_wholesale_plan,
						'address' => $aAddress,
						'ca_signed_date' => $aRequest['AuthorisationDate']
					));

			 		$sURL = "/services/{$iServiceIdentifierContext}:{$sIdentifier}/package";
			 		$aExtraHeaders = array("OVERRIDE_METHOD: PUT");
			 		$sDescription = 'Full Service Plan Change';
	 				break;
	 			case PROVISIONING_TYPE_PRESELECTION_PLAN_CHANGE:
			 		if (!$bHasPreSelectionPackage) {
			 			throw new Exception("The rate plan for the requested service does not have a preselection_wholesale_plan");
			 		}

			 		$aData = array_merge($aData, array(
						'package' => (int)$oRatePlan->preselection_wholesale_plan,
						'address' => $aAddress,
						'ca_signed_date' => $aRequest['AuthorisationDate']
					));

			 		$sURL = "/services/{$iServiceIdentifierContext}:{$sIdentifier}/package";
			 		$aExtraHeaders = array("OVERRIDE_METHOD: PUT");
			 		$sDescription = 'Pre-Selection Plan Change';
	 				break;
	 			case PROVISIONING_TYPE_FULL_SERVICE_REVERSE:
	 				if (!$bHasFullServicePackage) {
			 			throw new Exception("The rate plan for the requested service does not have a fullservice_wholesale_plan");
			 		}

	 				$sURL = "/services/{$iServiceIdentifierContext}:{$sIdentifier}";
	 				$aExtraHeaders = array("OVERRIDE_METHOD: DELETE");
	 				$sDescription = 'Full Service Remove Service';
	 				break;	 			
	 			case PROVISIONING_TYPE_PRESELECTION_REVERSE:
	 				if (!$bHasPreSelectionPackage) {
			 			throw new Exception("The rate plan for the requested service does not have a preselection_wholesale_plan");
			 		}
			 		
	 				$sURL = "/services/{$iServiceIdentifierContext}:{$sIdentifier}";
	 				$aExtraHeaders = array("OVERRIDE_METHOD: DELETE");
	 				$sDescription = 'Pre-Selection Remove Service';
	 				break;
	 			/*case PROVISIONING_TYPE_BAR:
	 				if (!$bHasPreSelectionPackage) {
			 			throw new Exception("The rate plan for the requested service does not have a preselection_wholesale_plan");
			 		}

	 				$sURL = "/services/{$iServiceIdentifierContext}:{$sIdentifier}/suspension";
	 				$aExtraHeaders = array("OVERRIDE_METHOD: PUT");
	 				$sDescription = 'Pre-Selection Add Suspension';
	 				break;
	 			case PROVISIONING_TYPE_UNBAR:
	 				if (!$bHasPreSelectionPackage) {
			 			throw new Exception("The rate plan for the requested service does not have a preselection_wholesale_plan");
			 		}
			 		
	 				$sURL = "/services/{$iServiceIdentifierContext}:{$sIdentifier}/suspension";
	 				$aExtraHeaders = array("OVERRIDE_METHOD: DELETE");
	 				$sDescription = 'Pre-Selection Remove Suspension';
	 				break;*/
	 		}

	 		$aRequest['Description'] = $sDescription;

	 		// Make the request, Using curl to make a request to the Telco Blue wholesale reseller api
	 		try {
	 			$aRequest['SentOn']	= $sNow;
	 			$this->_APIRequest($sURL, $aData, $aExtraHeaders);
	 			$aRequest['Status'] = REQUEST_STATUS_DELIVERED;
	 		} catch (Exception $oEx) {
	 			$aRequest['Status'] = REQUEST_STATUS_REJECTED;
	 			$aRequest['Description'] = $oEx->getMessage();
	 		}	 		
	 	} catch (Exception $oEx) {
	 		// Something failed, return as such
	 		$aRequest['Status']	= REQUEST_STATUS_WAITING;
	 		$aRequest['Description'] = $oEx->getMessage();
	 	}
 		
	 	// Return the modified Request
	 	return $aRequest;
 	}
 	
	// _Render: (Override) Renders this file to its final output format. No output file so nothing required
 	protected function _Render($bRenderToFile=true) {
 		return Array('Pass' => TRUE);
 	}

 	// _UpdateDB: (Override) No file export record needs to be created
 	protected function _UpdateDB() {
 		return array('Pass' => true, 'Description' => "UpdateDB() Successful");
 	}

 	// _Deliver: (Override) No delivery required
 	protected function _Deliver() {
 		return array('Pass' => true, 'Description' => "No delivery required");
 	}

 	private function _APIRequest($sURL, $aData, $aExtraHeaders=array()) {
 		// Build the url, e.g. /services
 		$sURL = $this->GetConfigField('APIURL').$sURL;

 		// Setup the curl request (a POST request)
 		$oCURL = new CURL();
		$oCURL->URL = $sURL;
		$oCURL->HEADER = 1;
		$oCURL->RETURNTRANSFER = true;
		$oCURL->SSL_VERIFYPEER = false;
		$oCURL->FOLLOWLOCATION = 1;
		$oCURL->TIMEOUT = 40;
		$oCURL->PORT = $this->GetConfigField('APIPort');
		$oCURL->POST = 1;

		// Add the post data
		$oCURL->POSTFIELDS = rawurlencode(JSON_Services::encode($aData));
		
		// Add headers, including api authentication header
		$iWholesaleAccountId = $this->GetConfigField('WholesaleAccountId');
		$sAPIPassword = sha1($this->GetConfigField('APIPassword'));
		$aHeaders = array(
			"Content-Type: application/json;",
			self::API_AUTHENTICATION_HEADER.": ".sha1("{$iWholesaleAccountId};{$sAPIPassword}")
		);

		foreach ($aExtraHeaders as $sHeader) {
			$aHeaders[] = $sHeader;
		}

		$oCURL->HTTPHEADER = $aHeaders;

 		// Send the request
		try {
			$sResponse = $oCURL->execute();	
		} catch (Exception $oEx) {
			throw new Exception($oEx->getMessage()." (URL: {$oCURL->URL})");
		}

		// Process the response, look for errors
		$aResponseParts = explode("\r\n\r\n", $sResponse);
		if (empty($aResponseParts)) {
			throw new Exception("Unexpected response from API: {$sResponse}");
		}

		$iBodyPartIndex = count($aResponseParts) - 1;
		if (isset($aResponseParts[$iBodyPartIndex - 1])) {
			// A header was returned in the response
			$aHeader = explode("\n", $aResponseParts[$iBodyPartIndex - 1]);
			$aStatus = explode(" ", $aHeader[0]);
			$iResponseStatus = (int)$aStatus[1];
		} else {
			// No header, weird response
			throw new Exception("Unexpected response from API, no HTTP header: {$sResponse}");
		}
		
		$sBody = $aResponseParts[$iBodyPartIndex];
		$mBody = JSON_Services::decode($sBody);
		$bInvalidJSONBody = ($mBody === null && trim($sBody) != 'null');
		switch ($iResponseStatus) {
			case 400: // BAD_REQUEST
			case 404: // NOT_FOUND
			case 405: // METHOD_NOT_ALLOWED
			case 500: // SERVER_ERROR
			case 501: // NOT_IMPLEMENTED
				if (!$bInvalidJSONBody && property_exists($mBody, 'oException') && property_exists($mBody->oException, 'sMessage')) {
					// Error passed back from API
					throw new Exception("API Error: ".$mBody->oException->sMessage);
				} else {
					// Other Http error
					throw new Exception("Error response from API: {$iResponseStatus}. URL='{$sURL}' Response='{$sBody}'");
				}
				break;
		}
		
		if ($bInvalidJSONBody) {
			// JSON decode error
			throw new Exception("Invalid JSON response from API. URL='{$sURL}' Response='{$sBody}'");
		}
 	}
}

?>