<?php

require_once dirname(__FILE__) . DIRECTORY_SEPARATOR . '../../../' . 'flex.require.php';

class Cli_App_ApplyLateFeesToAccounts extends Cli
{
	const SWITCH_TEST_RUN = "t";

	private $runDateTime = '';

	function run()
	{
		$now = time();
		$this->runDateTime = date('Y-m-d H:i:s', $now);

		if (date('Y-m-d') != '2008-06-30')
		{
			$this->showUsage('ERROR: This script was written to be run on 30th June 2008 only, as it is a one-off \'hot fix\'!');
			return 1;
		}

		$arrSummary = array();

		try
		{
			$this->_init_();

			$this->log('Beginning database transaction.');
			$conConnection = DataAccess::getDataAccess();
			$conConnection->TransactionStart();

			// The arguments are present and in a valid format if we get past this point.
			$arrArgs = $this->getValidatedArguments();

			if ($arrArgs[self::SWITCH_TEST_RUN])
			{
				$this->log("Running in test mode. Database changes will not be committed to the database.", TRUE);
			}

			$accountIds = $this->getOverdueAccounts();

			foreach ($accountIds as $accountId)
			{
				$this->log('Applying a late fee to account ' . $accountId . ', if appropriate.');
				$bolFeeApplied = $this->_applyLateFeeToAccountIfAppropriate($accountId);
				if ($bolFeeApplied)
				{
					$this->log('A late fee was applied to account ' . $accountId . '.');
					$arrSummary[] = $accountId;
				}
				else
				{
					$this->log('No late fee was applied to account ' . $accountId . '.');
				}
			}


			if ($arrArgs[self::SWITCH_TEST_RUN])
			{
				$this->log('Rolling back database changes as this is only a test.');
				$conConnection->TransactionRollback();
			}
			else
			{
				$this->log('Committing transaction.');
				$conConnection->TransactionCommit();
			}


			$attachments = array();
			$attachmentNames = array();
			$attachmentMimeTypes = array();

			// We now need to build a report detailing actions taken for each of the customer groups
			$this->log("Building report");
			$subject = '[SUCCESS]' . ($arrArgs[self::SWITCH_TEST_RUN] ? ' [TEST]' : '') . ' Automated late payment fees log for run dated ' . $this->runDateTime;
			$report = array();
			if ($arrArgs[self::SWITCH_TEST_RUN])
			{
				$report[] = "***RUN TEST MODE - DATABASE CHANGES WERE NOT COMMITTED***";
				$report[] = "";
			}

			$report[] = "Breakdown of applied late fees: -";

			if (count($arrSummary))
			{
				$report[] = "";
				$report[] = "Late payment fees were applied to the following " . count($arrSummary) . " accounts:";
				$report[] = "";
				$report[] = implode(", ", $arrSummary);
				$attachments[] = implode("\r\n", $arrSummary);
				$attachmentNames[] = "Automatic_Late_Fee_Accounts.csv";
				$attachmentMimeTypes[] = 'text/csv';
			}
			else
			{
				$report[] = "No late payment fees were applied.";
			}

			$body = implode("\r\n", $report);

			$this->log("Sending report");
			$outcome = $this->sendEmail("late_payment_run@yellowbilling.com.au", "ybs-admin@yellowbilling.com.au", $subject, $body, $attachments, $attachmentNames, $attachmentMimeTypes);

			if ($outcome === TRUE)
			{
				$this->log("Report sent");
			}
			else
			{
				$this->log("Failed to email report. ". ($outcome ? "\n$outcome" : ''), TRUE);
			}

			$this->log("Finished.");
			return 0;
		}
		catch(Exception $exception)
		{
			$this->log('ERROR: ' . $exception->getMessage());

			$this->log('Rolling back database transaction.');
			$conConnection->TransactionRollback();
			
			$this->log('Sending error report via email.');
			$subject = '[ERROR]'. ($arrArgs[self::SWITCH_TEST_RUN] ? ' [TEST]' : '') .' Automatic late payments failed - Database transaction rolled back at ' . date('Y-m-d H:i:s');
			$body = array();
			$body[] = 'The automatic late payments process failed. The database transaction was rolled back. The following error details are available: -'; 
			$body[] = '';
			$body[] = $exception->getMessage();
			if (count($report))
			{
				$body[] = '';
				$body[] = '';
				$body[] = 'The following (probably partial) report was generated: -';
				$body[] = implode("\r\n", $report);
			}
			else if (count($arrSummary))
			{
				$body[] = '';
				$body[] = '';
				$body[] = 'The problem may have occurred during the processing of potential target accounts. The following summary information had been cached: -';
				$body[] = '$arrSummary = ' . var_export($arrSummary, TRUE);
			}
			$body = implode("\r\n", $body);

			$outcome = $this->sendEmail("AutomatedLateFees@yellowbilling.com.au", "ybs-admin@yellowbilling.com.au", $subject, $body);
			$this->showUsage('ERROR: ' . $exception->getMessage());
			return 1;
		}
	}

	private function sendEmail($from, $to, $subject, $message, $attachments=NULL, $attachmentNames=NULL, $attachmentMimeTypes=NULL)
	{
		$this->startErrorCatching();
		$arrHeaders = array('From' => $from, 'Subject' => $subject);

		// Send them
		$mimMime = new Mail_mime("\n");
		$mimMime->setTXTBody($message);

		if ($attachments !== NULL)
		{
			if (!is_array($attachments))
			{
				$attachments = array(0=>$attachments);
				$attachmentNames = array(0=>$attachmentNames);
				$attachmentMimeTypes = array(0=>$attachmentMimeTypes);
			}

			for ($i = 0, $l = count($attachments); $i < $l; $i++)
			{
				$attachment = $attachments[$i];
				$attachmentName = $attachmentNames[$i];
				$attachmentMimeType = $attachmentMimeTypes[$i];
				$mimMime->addAttachment($attachment, $attachmentMimeType, $attachmentName, FALSE);
			}
		}

		$strBody = $mimMime->get();
		$strHeaders = $mimMime->headers($arrHeaders);
		$emlMail =& Mail::factory('mail');
		$result = TRUE;

		if (!$emlMail->send($to, $strHeaders, $strBody))
		{
			// Sending the email failed. Retrieve any errors as they may help.
			$result = $this->getCachedError();
		}
		else
		{
			// Ignore any errors. but invoke anyway to restore the previous error handler
			$this->getCachedError();
		}
		// Sending the email succeeded
		return $result;
	}

	function _init_()
	{
		$arrData = Array();
		$arrData['DisableLatePayment']	= new MySQLFunction("CASE WHEN DisableLatePayment = 0 THEN NULL ELSE DisableLatePayment + 1 END");
		$this->_ubiDecreaseLatePayment = new StatementUpdateById("Account", $arrData);
		
		$this->_strChargeType	= "LP".date("my");
	}


	function _applyLateFeeToAccountIfAppropriate($intAccountId)
	{
		$strTables = 'Account';

		$arrColumns = array(
			'Id' => 'Id',
			'AccountGroup' => 'AccountGroup',
			'DisableLatePayment' => 'DisableLatePayment',
		);

		$strWhere = 'Id = '. $intAccountId .' AND credit_control_status = 1';

		$selAccountDetails = new StatementSelect($strTables, $arrColumns, $strWhere);

		$mxdReturn = $selAccountDetails->Execute();
		if ($mxdReturn === FALSE)
		{
			$message = "Failed to load details of account $accountId:\n" . $selAccountDetails->Error();
			throw new Exception($message);
		}

		$arrAccount = $selAccountDetails->FetchAll();
		if (!count($arrAccount))
		{
			$this->log("No details for account $intAccountId, implying that late fees do not apply.");
			return FALSE;
		}

		return $this->applyLateFeeToAccountIfAppropriate($arrAccount[0]);
	}

	function applyLateFeeToAccountIfAppropriate($arrAccount)
	{
		// Does this account qualify?
		if ($arrAccount['DisableLatePayment'] === 1)
		{
			// Never add late payment fees when disabled
			return FALSE;
		}

		// Are we ignoring this Late Payment Fee?
		if ($arrAccount['DisableLatePayment'] !== NULL)
		{
			$arrData = Array();
			$arrData['Id']					= $arrAccount['Id'];
			$arrData['DisableLatePayment']	= new MySQLFunction("CASE WHEN DisableLatePayment = 0 THEN NULL ELSE DisableLatePayment + 1 END");

			// Update the number of times we ignore, and return
			$mxdReturn = $this->_ubiDecreaseLatePayment->Execute($arrData);
			if ($mxdReturn === FALSE)
			{
				throw new Exception('Failed to update DisableLatePayment field for account ' . $arrAccount['Id'] . '.');
			}

			// Was this their last chance to avoid a fee?
			if ($arrAccount['DisableLatePayment'] != 0)
			{
				// Yes
				return FALSE;
			}
		}
		
		$arrPaymentTerms = GetPaymentTerms();

		// Add the charge
		$arrCharge = Array();
		$arrCharge['Nature']		= 'DR';
		$arrCharge['Notes']			= "Automatically Added Charge";
		$arrCharge['Description']	= "Late Payment Fee";
		$arrCharge['ChargeType']	= $this->_strChargeType;
		$arrCharge['Amount']		= $arrPaymentTerms('late_payment_fee');
		$arrCharge['Status']		= CHARGE_TEMP_INVOICE;
		$arrCharge['Account'] 		= $arrAccount['Id'];
		$arrCharge['AccountGroup'] 	= $arrAccount['AccountGroup'];
		$arrCharge['ChargedOn']		= date("Y-m-d");
		$arrCharge['CreatedOn']		= date("Y-m-d");

		// Return TRUE or throw an exception
		if (!$GLOBALS['fwkFramework']->AddCharge($arrCharge))
		{
			throw new Exception('Failed to add charge to account ' . $arrAccount['Id'] . " using details:\n" . var_export($arrCharge, TRUE));
		}
		else
		{
			$this->log('Adding a note to account ' . $arrAccount['Id'] . '.');
			$GLOBALS['fwkFramework']->AddNote("Late Payment Fee of \$17.27 automatically applied to account.", SYSTEM_NOTE_TYPE, USER_ID, $arrAccount['AccountGroup'], $arrAccount['Id']);

			return TRUE;
		}
	}

	function getCommandLineArguments()
	{
		return array(

			self::SWITCH_TEST_RUN => array(
				self::ARG_REQUIRED		=> FALSE,
				self::ARG_DESCRIPTION	=> "for testing script outcome [no database changes will be committed]",
				self::ARG_DEFAULT		=> FALSE,
				self::ARG_VALIDATION	=> 'Cli::_validIsSet()'
			),
		
		);
	}

	function getOverdueAccounts()
	{
		return array(
			'1000005000', '1000005044', '1000005175', '1000005438', '1000005509', '1000005690', '1000005756', '1000005767', '1000006120', '1000006122', '1000006422', '1000006444',
			'1000006455', '1000006772', '1000006796', '1000007066', '1000007359', '1000007634', '1000008069', '1000008096', '1000008450', '1000008863', '1000009203', '1000009476',
			'1000009628', '1000009631', '1000009664', '1000009670', '1000009879', '1000009905', '1000009942', '1000010091', '1000010285', '1000010826', '1000010984', '1000011039',
			'1000011138', '1000011150', '1000011175', '1000154838', '1000154870', '1000154877', '1000154921', '1000154971', '1000155021', '1000155102', '1000155161', '1000155190',
			'1000155196', '1000155226', '1000155253', '1000155268', '1000155279', '1000155357', '1000155374', '1000155414', '1000155418', '1000155463', '1000155473', '1000155475',
			'1000155511', '1000155531', '1000155544', '1000155562', '1000155632', '1000155658', '1000155675', '1000155710', '1000155822', '1000155838', '1000155878', '1000155884',
			'1000155893', '1000155900', '1000155918', '1000155921', '1000155934', '1000155948', '1000156001', '1000156003', '1000156018', '1000156024', '1000156025', '1000156084',
			'1000156175', '1000156210', '1000156226', '1000156264', '1000156289', '1000156296', '1000156309', '1000156313', '1000156320', '1000156340', '1000156373', '1000156377',
			'1000156491', '1000156499', '1000156528', '1000156529', '1000156531', '1000156543', '1000156583', '1000156628', '1000156632', '1000156636', '1000156640', '1000156644',
			'1000156659', '1000156660', '1000156665', '1000156684', '1000156763', '1000156766', '1000156771', '1000156774', '1000156808', '1000156812', '1000156826', '1000156837',
			'1000156842', '1000156890', '1000156905', '1000156925', '1000156926', '1000156936', '1000156953', '1000156958', '1000156989', '1000156997', '1000157010', '1000157053',
			'1000157055', '1000157095', '1000157154', '1000157160', '1000157190', '1000157217', '1000157242', '1000157244', '1000157262', '1000157274', '1000157288', '1000157289',
			'1000157290', '1000157296', '1000157298', '1000157302', '1000157315', '1000157353', '1000157414', '1000157440', '1000157441', '1000157478', '1000157492', '1000157495',
			'1000157507', '1000157509', '1000157600', '1000157620', '1000157626', '1000157645', '1000157682', '1000157724', '1000157762', '1000157789', '1000157802', '1000157803',
			'1000157847', '1000157849', '1000157850', '1000157879', '1000157889', '1000157893', '1000157904', '1000157927', '1000157950', '1000157972', '1000157987', '1000157991',
			'1000158014', '1000158015', '1000158022', '1000158031', '1000158056', '1000158059', '1000158075', '1000158076', '1000158093', '1000158100', '1000158128', '1000158140',
			'1000158154', '1000158156', '1000158165', '1000158177', '1000158221', '1000158226', '1000158239', '1000158253', '1000158269', '1000158284', '1000158296', '1000158303',
			'1000158310', '1000158322', '1000158347', '1000158396', '1000158399', '1000158411', '1000158414', '1000158415', '1000158416', '1000158436', '1000158446', '1000158452',
			'1000158453', '1000158485', '1000158489', '1000158492', '1000158560', '1000158587', '1000158610', '1000158640', '1000158665', '1000158694', '1000158710', '1000158731',
			'1000158749', '1000158754', '1000158760', '1000158810', '1000158859', '1000158874', '1000158916', '1000158936', '1000158950', '1000158958', '1000159035', '1000159060',
			'1000159068', '1000159083', '1000159120', '1000159126', '1000159183', '1000159198', '1000159201', '1000159207', '1000159211', '1000159217', '1000159264', '1000159276',
			'1000159283', '1000159321', '1000159333', '1000159344', '1000159351', '1000159402', '1000159416', '1000159454', '1000159497', '1000159501', '1000159512', '1000159552',
			'1000159570', '1000159580', '1000159595', '1000159662', '1000159699', '1000159732', '1000159801', '1000159814', '1000159823', '1000159842', '1000159869', '1000159881',
			'1000159900', '1000159938', '1000159947', '1000159961', '1000159963', '1000159994', '1000160007', '1000160012', '1000160019', '1000160060', '1000160086', '1000160098',
			'1000160108', '1000160112', '1000160154', '1000160156', '1000160165', '1000160186', '1000160194', '1000160214', '1000160216', '1000160234', '1000160254', '1000160259',
			'1000160272', '1000160286', '1000160290', '1000160305', '1000160371', '1000160372', '1000160382', '1000160390', '1000160402', '1000160405', '1000160432', '1000160443',
			'1000160456', '1000160457', '1000160474', '1000160507', '1000160582', '1000160589', '1000160639', '1000160644', '1000160645', '1000160648', '1000160651', '1000160665',
			'1000160713', '1000160724', '1000160727', '1000160736', '1000160750', '1000160770', '1000160786', '1000160806', '1000160818', '1000160837', '1000160848', '1000160849',
			'1000160873', '1000160892', '1000160896', '1000160928', '1000160930', '1000160934', '1000160968', '1000160971', '1000160999', '1000161085', '1000161105', '1000161126',
			'1000161128', '1000161130', '1000161137', '1000161171', '1000161180', '1000161205', '1000161347', '1000161372', '1000161382', '1000161396', '1000161412', '1000161530',
			'1000161531', '1000161537', '1000161539', '1000161604', '1000161659', '1000161688', '1000161738', '1000161763', '1000161801', '1000161818', '1000161821', '1000161914',
			'1000161940', '1000161970', '1000162034', '1000162042', '1000162045', '1000162077', '1000162089', '1000162094', '1000162095', '1000162097', '1000162102', '1000162105',
			'1000162128', '1000162130', '1000162183', '1000162187', '1000162192', '1000162205', '1000162208', '1000162218', '1000162262', '1000162265', '1000162273', '1000162276',
			'1000162280', '1000162290', '1000162303', '1000162304', '1000162377', '1000162384', '1000162396', '1000162403', '1000162419', '1000162420', '1000162423', '1000162471',
			'1000162531', '1000162532', '1000162577', '1000162596', '1000162623', '1000162637', '1000162672', '1000162678', '1000162679', '1000162694', '1000162696', '1000162697',
			'1000162700', '1000162719', '1000162745', '1000162754', '1000162757', '1000162759', '1000162761', '1000162768', '1000162770', '1000162771', '1000162802', '1000162843',
			'1000162853', '1000162863', '1000162881', '1000162883', '1000162887', '1000162889', '1000162903', '1000162919', '1000162925', '1000162950', '1000162958', '1000162973',
			'1000162974', '1000162989', '1000162999', '1000163013', '1000163015', '1000163023', '1000163049', '1000163052', '1000163071', '1000163081', '1000163118', '1000163132',
			'1000163157', '1000163158', '1000163167', '1000163174', '1000163180', '1000163183', '1000163191', '1000163196', '1000163204', '1000163226', '1000163230', '1000163233',
			'1000163237', '1000163245', '1000163279', '1000163287', '1000163299', '1000163302', '1000163333', '1000163352', '1000163353', '1000163377', '1000163386', '1000163390',
			'1000163404', '1000163414', '1000163439', '1000163460', '1000163476', '1000163480', '1000163484', '1000163492', '1000163493', '1000163503', '1000163507', '1000163508',
			'1000163517', '1000163533', '1000163571', '1000163583', '1000163589', '1000163603', '1000163612', '1000163622', '1000163627', '1000163632', '1000163647', '1000163650',
			'1000163654', '1000163660', '1000163669', '1000163670', '1000163673', '1000163683', '1000163686', '1000163687', '1000163688', '1000163689', '1000163702', '1000163708',
			'1000163709', '1000163713', '1000163714', '1000163717', '1000163738', '1000163755', '1000163764', '1000163787', '1000163790', '1000163796', '1000163806', '1000163835',
			'1000163843', '1000163847', '1000163851', '1000163854', '1000163865', '1000163876', '1000163880', '1000163881', '1000163883', '1000163889', '1000163891', '1000163910',
			'1000163911', '1000163914', '1000163919', '1000163925', '1000163931', '1000163932', '1000163949', '1000163951', '1000163973', '1000163975', '1000163976', '1000163977',
			'1000163982', '1000163995', '1000164006', '1000164015', '1000164019', '1000164026', '1000164044', '1000164058', '1000164065', '1000164072', '1000164075', '1000164076',
			'1000164090', '1000164097', '1000164098', '1000164099', '1000164119', '1000164120', '1000164123', '1000164126', '1000164130', '1000164131', '1000164133', '1000164141',
			'1000164151', '1000164153', '1000164161', '1000164170', '1000164174', '1000164176', '1000164182', '1000164196', '1000164217', '1000164219', '1000164240', '1000164241',
			'1000164246', '1000164255', '1000164256', '1000164265', '1000164294', '1000164305', '1000164306', '1000164310', '1000164323', '1000164331', '1000164340', '1000164358',
			'1000164364', '1000164381', '1000164390', '1000164397', '1000164404', '1000164419', '1000164426', '1000164437', '1000164445', '1000164446', '1000164450', '1000164457',
			'1000164468', '1000164484', '1000164500', '1000164505', '1000164507', '1000164508', '1000164523', '1000164528', '1000164531', '1000164532', '1000164535', '1000164546',
			'1000164551', '1000164553', '1000164556', '1000164557', '1000164560', '1000164566', '1000164568', '1000164569', '1000164574', '1000164582', '1000164587', '1000164594',
			'1000164598', '1000164606', '1000164617', '1000164643', '1000164646', '1000164648', '1000164655', '1000164658', '1000164676', '1000164677', '1000164690', '1000164695',
			'1000164699', '1000164703', '1000164707', '1000164734', '1000164741', '1000164746', '1000164764', '1000164768', '1000164785', '1000164788', '1000164792', '1000164810',
			'1000164822', '1000164827', '1000164845', '1000164847', '1000164864', '1000164867', '1000164895', '1000164897', '1000164903', '1000164904', '1000164905', '1000164908',
			'1000164909', '1000164927', '1000164951', '1000164954', '1000164970', '1000164971', '1000164975', '1000164980', '1000164984', '1000164985', '1000165000', '1000165001',
			'1000165010', '1000165025', '1000165037', '1000165043', '1000165045', '1000165051', '1000165059', '1000165068', '1000165071', '1000165077', '1000165086', '1000165087',
			'1000165088', '1000165097', '1000165099', '1000165105', '1000165112', '1000165113', '1000165116', '1000165121', '1000165130', '1000165134', '1000165136', '1000165150',
			'1000165156', '1000165167', '1000165179', '1000165190', '1000165193', '1000165200', '1000165201', '1000165204', '1000165205', '1000165208', '1000165211', '1000165216',
			'1000165235', '1000165240', '1000165241', '1000165247', '1000165248', '1000165251', '1000165252', '1000165253', '1000165255', '1000165256', '1000165258', '1000165259',
			'1000165260', '1000165261', '1000165268', '1000165273', '1000165276', '1000165282', '1000165283', '1000165286', '1000165299', '1000165300', '1000165303', '1000165308',
			'1000165322', '1000165326', '1000165327', '1000165328', '1000165329', '1000165332', '1000165335', '1000165336', '1000165351', '1000165352', '1000165354', '1000165355',
			'1000165358', '1000165360', '1000165362', '1000165379', '1000165380', '1000165381', '1000165383', '1000165384', '1000165385', '1000165386', '1000165387', '1000165388',
			'1000165394', '1000165395', '1000165397', '1000165402', '1000165404', '1000165414', '1000165415', '1000165416', '1000165417', '1000165418', '1000165423', '1000165425',
			'1000165427', '1000165432', '1000165433', '1000165434', '1000165435', '1000165436', '1000165440', '1000165443', '1000165446', '1000165448', '1000165452', '1000165455',
			'1000165462', '1000165465', '1000165466', '1000165467', '1000165469', '1000165483', '1000165487', '1000165489', '1000165496', '1000165509', '1000165510', '1000165511',
			'1000165518', '1000165524', '1000165525', '1000165527', '1000165528', '1000165529', '1000165530', '1000165536', '1000165538', '1000165542', '1000165543', '1000165548',
			'1000165550', '1000165551', '1000165559', '1000165565', '1000165566', '1000165569', '1000165581', '1000165582', '1000165583', '1000165587', '1000165588', '1000165589',
			'1000165597', '1000165599', '1000165607', '1000165608', '1000165611', '1000165612', '1000165618', '1000165627', '1000165634', '1000165636', '1000165638', '1000165641',
			'1000165645', '1000165648', '1000165654', '1000165657', '1000165659', '1000165661', '1000165662', '1000165664', '1000165666', '1000165668', '1000165676', '1000165678',
			'1000165679', '1000165683', '1000165685', '1000165688', '1000165689', '1000165690', '1000165694', '1000165695', '1000165696', '1000165697', '1000165698', '1000165699',
			'1000165700', '1000165703', '1000165704', '1000165709', '1000165710', '1000165715', '1000165717', '1000165720', '1000165722', '1000165724', '1000165726', '1000165731',
			'1000165734', '1000165736', '1000165737', '1000165740', '1000165741', '1000165742', '1000165745', '1000165748', '1000165750', '1000165753', '1000165755', '1000165758',
			'1000165761', '1000165765', '1000165768', '1000165770', '1000165772', '1000165773', '1000165774', '1000165775', '1000165776', '1000165778', '1000165785', '1000165786',
			'1000165789', '1000165792', '1000165793', '1000165798', '1000165800', '1000165801', '1000165802', '1000165803', '1000165809', '1000165813', '1000165814', '1000165818',
			'1000165821', '1000165828', '1000165836', '1000165837', '1000165840', '1000165848', '1000165860', '1000165861', '1000165864', '1000165873', '1000165874', '1000165877',
			'1000165878', '1000165879', '1000165881', '1000165882', '1000165885', '1000165887', '1000165888', '1000165889', '1000165891', '1000165895', '1000165909', '1000165910',
			'1000165912', '1000165913', '1000165915', '1000165916', '1000165920', '1000165922', '1000165924', '1000165931', '1000165932', '1000165933', '1000165934', '1000165938',
			'1000165942', '1000165943', '1000165947', '1000165948', '1000165950', '1000165954', '1000165955', '1000165956', '1000165962', '1000165964', '1000165968', '1000165970',
			'1000165971', '1000165972', '1000165974', '1000165975', '1000165978', '1000165980', '1000165981', '1000165982', '1000165987', '1000165989', '1000165990', '1000165991',
			'1000165993', '1000165995', '1000165996', '1000165998', '1000165999', '1000166002', '1000166007', '1000166008', '1000166014', '1000166015', '1000166019', '1000166023',
			'1000166032', '1000166033', '1000166034', '1000166035', '1000166037', '1000166040', '1000166041', '1000166046', '1000166049', '1000166052', '1000166058', '1000166060',
			'1000166061', '1000166067', '1000166070', '1000166074', '1000166075', '1000166076', '1000166082', '1000166085', '1000166087', '1000166091', '1000166095', '1000166097',
			'1000166099', '1000166100', '1000166106', '1000166108', '1000166109', '1000166110', '1000166115', '1000166119', '1000166122', '1000166124', '1000166127', '1000166133',
			'1000166135', '1000166139', '1000166140', '1000166144', '1000166147', '1000166148', '1000166149', '1000166150', '1000166152', '1000166153', '1000166156', '1000166159',
			'1000166161', '1000166169', '1000166170', '1000166183', '1000166184', '1000166187', '1000166188', '1000166190', '1000166194', '1000166202', '1000166203', '1000166207',
			'1000166211', '1000166212', '1000166213', '1000166217', '1000166219', '1000166223', '1000166225', '1000166227', '1000166231', '1000166232', '1000166235', '1000166236',
			'1000166237', '1000166238', '1000166240', '1000166243', '1000166244', '1000166245', '1000166247', '1000166248', '1000166251', '1000166252', '1000166253', '1000166254',
			'1000166255', '1000166256', '1000166258', '1000166260', '1000166261', '1000166264', '1000166267', '1000166269', '1000166273', '1000166274', '1000166275', '1000166279',
			'1000166280', '1000166282', '1000166283', '1000166285', '1000166288', '1000166290', '1000166292', '1000166294', '1000166296', '1000166301', '1000166304', '1000166306',
			'1000166308', '1000166310', '1000166312', '1000166314', '1000166316', '1000166317', '1000166321', '1000166327', '1000166331', '1000166336', '1000166338', '1000166341',
			'1000166342', '1000166344', '1000166345', '1000166346', '1000166348', '1000166352', '1000166353', '1000166357', '1000166359', '1000166362', '1000166364', '1000166365',
			'1000166367', '1000166369', '1000166370', '1000166372', '1000166373', '1000166376', '1000166377', '1000166378', '1000166380', '1000166381', '1000166382', '1000166383',
			'1000166384', '1000166392', '1000166394', '1000166395', '1000166397', '1000166400', '1000166406', '1000166407', '1000166408', '1000166409', '1000166410', '1000166412',
			'1000166413', '1000166414', '1000166418', '1000166419', '1000166423', '1000166426', '1000166427', '1000166434', '1000166435', '1000166438', '1000166440', '1000166444',
			'1000166446', '1000166447', '1000166449', '1000166453', '1000166455', '1000166456', '1000166457', '1000166460', '1000166462', '1000166470', '1000166471', '1000166475',
			'1000166476', '1000166479', '1000166481', '1000166483', '1000166488', '1000166489', '1000166491', '1000166492', '1000166493', '1000166494', '1000166495', '1000166496',
			'1000166499', '1000166501', '1000166502', '1000166503', '1000166504', '1000166506', '1000166507', '1000166508', '1000166509', '1000166513', '1000166514', '1000166519',
			'1000166521', '1000166525', '1000166526', '1000166527', '1000166528', '1000166532', '1000166533', '1000166536', '1000166537', '1000166538', '1000166539', '1000166543',
			'1000166547', '1000166549', '1000166552', '1000166554', '1000166555', '1000166556', '1000166560', '1000166563', '1000166566', '1000166568', '1000166570', '1000166572',
			'1000166574', '1000166577', '1000166581', '1000166582', '1000166583', '1000166585', '1000166589', '1000166590', '1000166593', '1000166603', '1000166606', '1000166607',
			'1000166611', '1000166613', '1000166614', '1000166615', '1000166616', '1000166617', '1000166618', '1000166620', '1000166621', '1000166622', '1000166625', '1000166626',
			'1000166629', '1000166632', '1000166633', '1000166634', '1000166638', '1000166647', '1000166648', '1000166650', '1000166651', '1000166654', '1000166660', '1000166663',
			'1000166664', '1000166666', '1000166668', '1000166674', '1000166679', '1000166680', '1000166681', '1000166686', '1000166687', '1000166692', '1000166694', '1000166695',
			'1000166699', '1000166700', '1000166701', '1000166702', '1000166703', '1000166704', '1000166705', '1000166707', '1000166708', '1000166710', '1000166712', '1000166713',
			'1000166718', '1000166719', '1000166722', '1000166724', '1000166728', '1000166729', '1000166735', '1000166737', '1000166739', '1000166740', '1000166744', '1000166746',
			'1000166749', '1000166753', '1000166755', '1000166757', '1000166759', '1000166760', '1000166762', '1000166763', '1000166766', '1000166770', '1000166771', '1000166774',
			'1000166776', '1000166778', '1000166781', '1000166782', '1000166783', '1000166786', '1000166787', '1000166794', '1000166797', '1000166799', '1000166800', '1000166802',
			'1000166803', '1000166804', '1000166805', '1000166808', '1000166811', '1000166813', '1000166815', '1000166816', '1000166817', '1000166818', '1000166819', '1000166820',
			'1000166822', '1000166823', '1000166825', '1000166826', '1000166827', '1000166828', '1000166834', '1000166837', '1000166838', '1000166841', '1000166848', '1000166853',
			'1000166856', '1000166857', '1000166860', '1000166861', '1000166867', '1000166868', '1000166870', '1000166871', '1000166872', '1000166873', '1000166875', '1000166876',
			'1000166877', '1000166879', '1000166880', '1000166885', '1000166886', '1000166887', '1000166890', '1000166896', '1000166900', '1000166901', '1000166902', '1000166905',
			'1000166906', '1000166908', '1000166911', '1000166914', '1000166915', '1000166916', '1000166917', '1000166919', '1000166920', '1000166921', '1000166922', '1000166925',
			'1000166928', '1000166929', '1000166930', '1000166932', '1000166934', '1000166936', '1000166939', '1000166941', '1000166942', '1000166951', '1000166954', '1000166955',
			'1000166957', '1000166963', '1000166965', '1000166969', '1000166974', '1000166975', '1000166976', '1000166977', '1000166978', '1000166983', '1000166985', '1000166987',
			'1000166992', '1000166993', '1000166996', '1000166999', '1000167003', '1000167004', '1000167007', '1000167008', '1000167009', '1000167012', '1000167013', '1000167014',
			'1000167017', '1000167018', '1000167019', '1000167023', '1000167025', '1000167027', '1000167029', '1000167032', '1000167033', '1000167034', '1000167035', '1000167036',
			'1000167038', '1000167045', '1000167048', '1000167054', '1000167058', '1000167059', '1000167063', '1000167064', '1000167069', '1000167071', '1000167072', '1000167073',
			'1000167076', '1000167079', '1000167081', '1000167083', '1000167087', '1000167088', '1000167089', '1000167091', '1000167094', '1000167095', '1000167096', '1000167097',
			'1000167103', '1000167105', '1000167107', '1000167109', '1000167110', '1000167113', '1000167114', '1000167119', '1000167120', '1000167121', '1000167123', '1000167124',
			'1000167126', '1000167128', '1000167129', '1000167132', '1000167138', '1000167139', '1000167143', '1000167144', '1000167151', '1000167154', '1000167158', '1000167160',
			'1000167161', '1000167162', '1000167163', '1000167165', '1000167166', '1000167168', '1000167174', '1000167175', '1000167176', '1000167179', '1000167180', '1000167181',
			'1000167182', '1000167186', '1000167187', '1000167192', '1000167195', '1000167201', '1000167203', '1000167204', '1000167206', '1000167208', '1000167209', '1000167210',
			'1000167213', '1000167215', '1000167217', '1000167220', '1000167221', '1000167222', '1000167224', '1000167226', '1000167227', '1000167228', '1000167229', '1000167230',
			'1000167231', '1000167237', '1000167241', '1000167243', '1000167244', '1000167246', '1000167247', '1000167248', '1000167250', '1000167252', '1000167253', '1000167258',
			'1000167261', '1000167267', '1000167274', '1000167278', '1000167279', '1000167280', '1000167288', '1000167292', '1000167294', '1000167295', '1000167298', '1000167299',
			'1000167301', '1000167302', '1000167304', '1000167305', '1000167306', '1000167308', '1000167309', '1000167310', '1000167313', '1000167316', '1000167317', '1000167319',
			'1000167320', '1000167322', '1000167323', '1000167325', '1000167326', '1000167327', '1000167328', '1000167330', '1000167333', '1000167334', '1000167335', '1000167339',
			'1000167340', '1000167341', '1000167343', '1000167344', '1000167347', '1000167349', '1000167352', '1000167356', '1000167358', '1000167360', '1000167361', '1000167364',
			'1000167367', '1000167368', '1000167370', '1000167371', '1000167373', '1000167374', '1000167376', '1000167377', '1000167378', '1000167379', '1000167380', '1000167382',
			'1000167383', '1000167385', '1000167387', '1000167392', '1000167393', '1000167394', '1000167395', '1000167396', '1000167397', '1000167401', '1000167402', '1000167405',
			'1000167408', '1000167409', '1000167410', '1000167415', '1000167416', '1000167417', '1000167418', '1000167422', '1000167423', '1000167425', '1000167426', '1000167429',
			'1000167431', '1000167435', '1000167436', '1000167438', '1000167441', '1000167442', '1000167443', '1000167444', '1000167445', '1000167446', '1000167448', '1000167452',
			'1000167453', '1000167461', '1000167463', '1000167468', '1000167469', '1000167470', '1000167471', '1000167475', '1000167476', '1000167477', '1000167481', '1000167482',
			'1000167484', '1000167485', '1000167488', '1000167489', '1000167490', '1000167491', '1000167492', '1000167493', '1000167497', '1000167499', '1000167500', '1000167502',
			'1000167503', '1000167504', '1000167506', '1000167507', '1000167508', '1000167509', '1000167512', '1000167513', '1000167514', '1000167515', '1000167516', '1000167517',
			'1000167520', '1000167522', '1000167523', '1000167524', '1000167525', '1000167532', '1000167533', '1000167534', '1000167535', '1000167538', '1000167548', '1000167549',
			'1000167551', '1000167553', '1000167555', '1000167556', '1000167557', '1000167558', '1000167559', '1000167560', '1000167562', '1000167565', '1000167566', '1000167567',
			'1000167568', '1000167569', '1000167572', '1000167573', '1000167574', '1000167575', '1000167576', '1000167578', '1000167579', '1000167580', '1000167581', '1000167583',
			'1000167584', '1000167585', '1000167586', '1000167589', '1000167591', '1000167593', '1000167595', '1000167596', '1000167598', '1000167600', '1000167603', '1000167609',
			'1000167612', '1000167613', '1000167616', '1000167617', '1000167620', '1000167622', '1000167623', '1000167624', '1000167625', '1000167627', '1000167629', '1000167631',
			'1000167632', '1000167633', '1000167634', '1000167636', '1000167637', '1000167641', '1000167642', '1000167644', '1000167646', '1000167651', '1000167652', '1000167653',
			'1000167654', '1000167655', '1000167656', '1000167659', '1000167660', '1000167661', '1000167662', '1000167665', '1000167666', '1000167667', '1000167668', '1000167669',
			'1000167670', '1000167672', '1000167673', '1000167675', '1000167676', '1000167677', '1000167678', '1000167679', '1000167680', '1000167682', '1000167685', '1000167687',
			'1000167690', '1000167691', '1000167692', '1000167693', '1000167697', '1000167700', '1000167701', '1000167702', '1000167703', '1000167704', '1000167705', '1000167706',
			'1000167707', '1000167708', '1000167709', '1000167710', '1000167711', '1000167713', '1000167714', '1000167715', '1000167716', '1000167717', '1000167720', '1000167721',
			'1000167722', '1000167724', '1000167727', '1000167730', '1000167731', '1000167735', '1000167736', '1000167737', '1000167740', '1000167741', '1000167745', '1000167746',
			'1000167749', '1000167754', '1000167755', '1000167756', '1000167759', '1000167762', '1000167766', '1000167768', '1000167769', '1000167770', '1000167771', '1000167772',
			'1000167773', '1000167774', '1000167775', '1000167779', '1000167780', '1000167783', '1000167784', '1000167785', '1000167786', '1000167787', '1000167788', '1000167789',
			'1000167790', '1000167791', '1000167792', '1000167795', '1000167800', '1000167803', '1000167805', '1000167808', '1000167811', '1000167812', '1000167813', '1000167815',
			'1000167820', '1000167822', '1000167826', '1000167827', '1000167830', '1000167832', '1000167833', '1000167834', '1000167835', '1000167840', '1000167841', '1000167843',
			'1000167845', '1000167846', '1000167848', '1000167850', '1000167851', '1000167853', '1000167854', '1000167855', '1000167863', '1000167865', '1000167866', '1000167870',
			'1000167874', '1000167875', '1000167876', '1000167877', '1000167878', '1000167879', '1000167880', '1000167882', '1000167883', '1000167887', '1000167888', '1000167890',
			'1000167891', '1000167892', '1000167893', '1000167894', '1000167895', '1000167896', '1000167898', '1000167900', '1000167901', '1000167903', '1000167904', '1000167911',
			'1000167912', '1000167924', '1000167925', '1000167926', '1000167928', '1000167931', '1000167932', '1000167935', '1000167938', '1000167947', '1000167949', '1000167961',
			'1000167964', '1000167965', '1000167971', '1000167974', '1000167977', '1000167978', '1000167985', '1000167989', '1000167990', '1000167991', '1000167993', '1000168006',
			'1000168007', '1000168011', '1000168014', '1000168015', '1000168018', '1000168023', '1000168029', '1000168053',
		);
	}
}


?>
