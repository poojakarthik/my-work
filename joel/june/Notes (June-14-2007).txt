To Ask Jared
Should the HtmlTemplate that outputs the list of invoices be located in the account directory, or the invoice directory?
If it is to reside in the invoice directory, should its class name be changed from 
HtmlTemplateAccountInvoices 
to
HtmlTemplateInvoiceList?


To Ask Jared
The human readable strings associated with Invoice.Status are currently stored as constants in definition.php.  This is a perfectly good example
of where the UIAppDocumentationOptions table can be used to map numeric status values to these strings.  But then you would be
storing the definitions of the status constants in two locations, if they are being left in definition.php.


TODO (tomorrow)
Change all account_ledger stuff to invoices_and_payments

Update the $arrParams definition found at the top of html_elements.php
(DONE)

I think we might need a method that will return the value of a property as if it were returned from HtmlElements->_BuildOutputValue()
so that it can be used directly in html code


How should I output the links to related documents in KnowledgeBase?

Implement the stuff on the board.
The RenderInput, RenderOutput, RenderValue have similar methods that don't output the marked-up, formatted property, but instead returns the 
html code as a string
(DONE)

How are we going to make negative monetary values be displayed without the negative sign?
We probably want to do ($100.00) to represent -100.00 dollars
or possibly (100.00)
currently, with using the OutputLabel $<value> negative numbers are displayed as $-100.00

Could we let the RenderOutput, etc methods accept a value specified by the HtmlTemplate programmer?
(for use in situations where you want to explicitly define the value, but want it to be formatted in the Property's formally specified way)
see invoices HtmlTemplate ==> Invoice status

Look at this monitor_app/www/page.php down the very bottom of the file to create the Table() functionality


Stuff on the board regarding the Table class: (DONE)
When storing an identifier for a single table, append the TableName to "VixenTable" so we don't get identifier conflicts
Table()->TableName->Render()  //implement this one last
Table()->TableName->AddHeader('___', '___', '___',etc) Check out GetFuncArgs for dynamic parameter lists
Table()->TableName->AddRow(DBO()->obj->prop->AsValue(), _____, _____, etc)
                           DBO()->obj->prop->AsLink($strHref)
where $strHref = Href()->{MenuItem}(DBO()->obj2->prop2->Value, ...);
Table()->TableName->SetWidth('20%', '30%', '50%') or can use 30px, etc
Table()->TableName->SetAlignment('Left', NULL, 'Right', etc)
Table()->TableName->RowHighlight = TRUE | FALSE    (magic variable)
Table()->TableName->AddDetail($strHtmlContent)  ==> $this->_bolDetail = TRUE
Table()->TableName->AddIndex($strName, $mixValue)	effectively does $this->_arrRows[current]['index'][$strName][] = $mixValue
Table()->TableName->LinkTable($strTableName, $strIndexName) effectively does $this->_arrLinkedTables[] = Array($strTableName => $strIndexName)
Table()->TableName->AddToolTip($strHtmlContent)

Data structure defining rows:
$this->_arrRow[i]['Detail'] 	= $strDetail (HTML -> detial div)
		['Columns'] 	= $arrColumns (indexed array of HTML output)
                ['ToolTip']	= $strToolTip (HTML -> tooltip div)
                ['index']	= [name][i] = value
$this->_arrLinkedTables[]	= array of index names
$this->_arrHeader

The stuff Jared wrote on the whiteboard about links:
UpdateLink(arrTables, arrIndexes, arrSkipTables)
  foreach target not in arrSkipTables
    Unhighlight all on target (collapse?)
    foreach row in target
      Highlight if index matches
      add rows indexes to arrTargetIndexes
    if we are linked to tables
      Call UpdateLink(arrTargetTables, arrTargetIndexes)

TODO
DBO()->Account->Id->AsLink($strHref, [$intContext]) ==> "<span class=...><a href='{$strHref}'>formatted Property</a></span>" 			(DONE)
DBO()->Account->Id->RenderLink(...) same as AsLink, but actually echos the html code 								(DONE)
(make a private method of PropertyToken called _Link)												(DONE)
DBO()->Account->Id->RenderArbitrary($mixValue, [$intContext]) ==> renders the property using $mixValue as the value of the property
DBO()->Account->Id->AsArbitrary($mixValue)
DBO()->Account->Id->RenderCallback(mixCallback, [$intContext], [$callbackArgs]) ==> runs mixCallback on the property's value then renders it
DBO()->Account->Id->AsCallback(mixCallback, [$intContext], [$callbackArgs])

TODO
The HtmlElements methods should not echo out any html.  They should compile a string of html and then the calling method should
decide whether or not to echo it, or return it.  Therefore the only difference between the As... methods and the Render... methods
is that the former returns the output produced by the HtmlElement and the latter echos it.
(DONE)

TODO
Contact->EmailAddress would be OutputType = LinkLabel in the UIAppDocumentation Table
Implement HtmlElements->LinkLabel($arrParams)
I have called this OutputType, "EmailLinkLabel"
(DONE)

email addresses stored in the database as a table column can have more than one email address within it either separated by spaces or by
commas. You are going to have to work out how the "mailto:" html code works to handle this
I think you should have an OutputType called Email and an OutputType called URL 
Yeah, I'll do it this way



