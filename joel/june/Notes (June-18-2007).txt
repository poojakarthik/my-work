do the stuff listed in last Friday's notes


I recall Jared talking about linking VixenTables on more than 1 index, or linking on a particular index and if that one fails, link on a different
index.  After you finish all the Render methods, and the Href class, and renaming the files in svn, find out what he meant by that.
We are doing an "OR" index between vixen tables, we could add in an "AND" index.
For example, with the current link between Payments and Invoices, We are using the invoice number as the index.  This was a little
tricky to calculate.  If we had "AND" functionallity, we could have specified the index to be on InvoiceRun AND Account, which would
uniquely identify the relationship between invoices and payments.
Jared said we will not be implementing this until it is necessary.

I recall we wanted to make tool tips in tables only show when the mouse has been still, on a row, for about a second.  Just like real tool tips.
(I have brought this to Jared's attention)

I should probably implement the masking of values
The function HtmlElements->ApplyOutputMask() needs to include this fuunctionality
(Do this only if it is necessary to build the Invoices and Payments page)



TODO
DBO()->Account->Id->AsLink($strHref, [$intContext]) ==> "<span class=...><a href='{$strHref}'>formatted Property</a></span>" 			(DONE)
DBO()->Account->Id->RenderLink(...) same as AsLink, but actually echos the html code 								(DONE)
(make a private method of PropertyToken called _Link)												(DONE)
DBO()->Account->Id->RenderArbitrary($mixValue, [$intContext]) ==> renders the property using $mixValue as the value of the property		(DONE)
DBO()->Account->Id->AsArbitrary($mixValue)													(DONE)
DBO()->Account->Id->RenderCallback(mixCallback, [$intContext], [$callbackArgs]) ==> runs mixCallback on the property's value then renders it	(DONE)
DBO()->Account->Id->AsCallback(mixCallback, [$intContext], [$callbackArgs])									(DONE)

TODO
The HtmlElements methods should not echo out any html.  They should compile a string of html and then the calling method should
decide whether or not to echo it, or return it.  Therefore the only difference between the As... methods and the Render... methods
is that the former returns the output produced by the HtmlElement and the latter echos it.
(DONE)

TODO
Contact->EmailAddress would be OutputType = LinkLabel in the UIAppDocumentation Table
Implement HtmlElements->LinkLabel($arrParams)
I have called this OutputType, "EmailLinkLabel"
(DONE)

email addresses stored in the database as a table column can have more than one email address within it either separated by spaces or by
commas. You are going to have to work out how the "mailto:" html code works to handle this
I think you should have an OutputType called Email and an OutputType called URL 
Yeah, I'll do it this way

In testing the EmailLinkLabel I tried getting contact details for a contact with Account equal to CompuGlobal's, 
but DBO()->Contact->Account = DBO()->Account->Id.Value; will just assign the value to the property.  It doesn't use it as part of 
the where clause.  Admittedly I should have used DBL because there could be more than one contact associated with an account.
But I think what I was originally trying to do, should work.  At the momement you can only do it with the Id property.
ie: DBO()->Contact->Id = 14285;

