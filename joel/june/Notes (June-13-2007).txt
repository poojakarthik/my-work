The functions you added to HtmlElements yesterday are only for the OutputLabel column of UIAppDocumentationOptions.
Make an equiverlent function for InputLabel.

check out the Label method of HtmlElements.  Currently it only outputs the accompanying label if context == 0.
I think this is a hack and should be handled differently.  It can now be handled by using the OutputValueOnly OutputType
in the documentation.  So the check for (context == 0) should be removed from HtmlElements->Label()


Things I've done today:
Fixed the HtmlElements->_BuildOutputValue method so that it now always uses the OutputLabel attribute of the 
UIAppDocumentation table, if it is not null and not empty or filled with whitespace.

Changed HtmlElements->OutputLabel to HtmlElements->ValueLabelOnly
This does the same as HtmlElements->Label, but does not include the accompanying label that usually only displays the property's name.
This OutputType has been used for Author.FirstName .LastName and Authorisor.FirstName .LastName

Fixed DbWhere::GetString();

TODO
Make sure that specifying the Where clause for a DBList is working properly.  I don't think it currently is.
(DONE)(fixed it)


TODO
Continue building the HtmlTemplate Object, "Account Details" then work on the HtmlElements required for this html object

To Ask Jared
Should the HtmlTemplate that outputs the list of invoices be located in the account directory, or the invoice directory?
If it is to reside in the invoice directory, should its class name be changed from 
HtmlTemplateAccountInvoices 
to
HtmlTemplateInvoiceList?


To Ask Jared
The human readable strings associated with Invoice.Status are currently stored as constants in definition.php.  This is a perfectly good example
of where the UIAppDocumentationOptions table can be used to map numeric status values to these strings.  But then you would be
storing the definitions of the status constants in two locations, if they are being left in definition.php.

To Ask Jared
in UIAppDocumentation we define a single class for the property, but in the existing program the label accompanying the 
the property's value is usually using a different class, and has a description attatched to it.
(We have somewhat handled this now, within HtmlElement->Label)

TODO (tomorrow)
Change all account_ledger stuff to invoices_and_payments
on an unrelated note, you will probably have to update the $arrParams definition found at the top of html_elements.php
	Debug(DBO()->Account->Info());
	die;

I think we might need a method that will return the value of a property as if it were returned from HtmlElements->_BuildOutputValue()
so that it can be used directly in html code
It could be a magic variable of the PropertyToken class, named OutputValue
How should I output the links to related documents in KnowledgeBase
Implement the stuff on the board.
